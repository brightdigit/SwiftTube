//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//
import Foundation
import Prch
/** Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15 */
public struct PlaylistItemSnippet: Model {
  /** The ID that YouTube uses to uniquely identify the user that added the item to the playlist. */
  public var channelId: String?

  /** Channel title for the channel that the playlist item belongs to. */
  public var channelTitle: String?

  /** The item's description. */
  public var description: String?

  /** The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in. */
  public var playlistId: String?

  /** The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth. */
  public var position: Int?

  /** The date and time that the item was added to the playlist. */
  public var publishedAt: Date?

  /** The id object contains information that can be used to uniquely identify the resource that is included in the playlist as the playlist item. */
  public var resourceId: ResourceId?

  /** A map of thumbnail images associated with the playlist item. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail. */
  public var thumbnails: ThumbnailDetails?

  /** The item's title. */
  public var title: String?

  /** Channel id for the channel this video belongs to. */
  public var videoOwnerChannelId: String?

  /** Channel title for the channel this video belongs to. */
  public var videoOwnerChannelTitle: String?

  public init(channelId: String? = nil, channelTitle: String? = nil, description: String? = nil, playlistId: String? = nil, position: Int? = nil, publishedAt: Date? = nil, resourceId: ResourceId? = nil, thumbnails: ThumbnailDetails? = nil, title: String? = nil, videoOwnerChannelId: String? = nil, videoOwnerChannelTitle: String? = nil) {
    self.channelId = channelId
    self.channelTitle = channelTitle
    self.description = description
    self.playlistId = playlistId
    self.position = position
    self.publishedAt = publishedAt
    self.resourceId = resourceId
    self.thumbnails = thumbnails
    self.title = title
    self.videoOwnerChannelId = videoOwnerChannelId
    self.videoOwnerChannelTitle = videoOwnerChannelTitle
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: StringCodingKey.self)

    channelId = try container.decodeIfPresent("channelId")
    channelTitle = try container.decodeIfPresent("channelTitle")
    description = try container.decodeIfPresent("description")
    playlistId = try container.decodeIfPresent("playlistId")
    position = try container.decodeIfPresent("position")
    publishedAt = try container.decodeIfPresent("publishedAt")
    resourceId = try container.decodeIfPresent("resourceId")
    thumbnails = try container.decodeIfPresent("thumbnails")
    title = try container.decodeIfPresent("title")
    videoOwnerChannelId = try container.decodeIfPresent("videoOwnerChannelId")
    videoOwnerChannelTitle = try container.decodeIfPresent("videoOwnerChannelTitle")
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: StringCodingKey.self)

    try container.encodeIfPresent(channelId, forKey: "channelId")
    try container.encodeIfPresent(channelTitle, forKey: "channelTitle")
    try container.encodeIfPresent(description, forKey: "description")
    try container.encodeIfPresent(playlistId, forKey: "playlistId")
    try container.encodeIfPresent(position, forKey: "position")
    try container.encodeIfPresent(publishedAt, forKey: "publishedAt")
    try container.encodeIfPresent(resourceId, forKey: "resourceId")
    try container.encodeIfPresent(thumbnails, forKey: "thumbnails")
    try container.encodeIfPresent(title, forKey: "title")
    try container.encodeIfPresent(videoOwnerChannelId, forKey: "videoOwnerChannelId")
    try container.encodeIfPresent(videoOwnerChannelTitle, forKey: "videoOwnerChannelTitle")
  }
}
