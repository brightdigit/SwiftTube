//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import Prch

extension PlaylistItems {

    /** Updates an existing resource. */
    public enum YoutubePlaylistItemsUpdate {

        public static let service = APIService<Response>(id: "youtube.playlistItems.update", tag: "playlistItems", method: "PUT", path: "/youtube/v3/playlistItems", hasBody: true, securityRequirements: [SecurityRequirement(type: "Oauth2", scopes: ["https://www.googleapis.com/auth/youtube"]), SecurityRequirement(type: "Oauth2", scopes: ["https://www.googleapis.com/auth/youtube.force-ssl"]), SecurityRequirement(type: "Oauth2", scopes: ["https://www.googleapis.com/auth/youtubepartner"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** V1 error format. */
                public var dollarXgafv: Xgafv?

                /** OAuth access token. */
                public var accessToken: String?

                /** Data format for response. */
                public var alt: Alt?

                /** JSONP */
                public var callback: String?

                /** Selector specifying which fields to include in a partial response. */
                public var fields: String?

                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                public var key: String?

                /** OAuth 2.0 token for the current user. */
                public var oauthToken: String?

                /** Returns response with indentations and line breaks. */
                public var prettyPrint: Bool?

                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                public var quotaUser: String?

                /** Upload protocol for media (e.g. "raw", "multipart"). */
                public var uploadProtocol: String?

                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                public var uploadType: String?

                /** The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings. */
                public var part: [String]

                /** *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. */
                public var onBehalfOfContentOwner: String?

                public init(dollarXgafv: Xgafv? = nil, accessToken: String? = nil, alt: Alt? = nil, callback: String? = nil, fields: String? = nil, key: String? = nil, oauthToken: String? = nil, prettyPrint: Bool? = nil, quotaUser: String? = nil, uploadProtocol: String? = nil, uploadType: String? = nil, part: [String], onBehalfOfContentOwner: String? = nil) {
                    self.dollarXgafv = dollarXgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }

            public var options: Options

            public var body: PlaylistItem?

            public init(body: PlaylistItem?, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: YoutubePlaylistItemsUpdate.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(dollarXgafv: Xgafv? = nil, accessToken: String? = nil, alt: Alt? = nil, callback: String? = nil, fields: String? = nil, key: String? = nil, oauthToken: String? = nil, prettyPrint: Bool? = nil, quotaUser: String? = nil, uploadProtocol: String? = nil, uploadType: String? = nil, part: [String], onBehalfOfContentOwner: String? = nil, body: PlaylistItem? = nil) {
                let options = Options(dollarXgafv: dollarXgafv, accessToken: accessToken, alt: alt, callback: callback, fields: fields, key: key, oauthToken: oauthToken, prettyPrint: prettyPrint, quotaUser: quotaUser, uploadProtocol: uploadProtocol, uploadType: uploadType, part: part, onBehalfOfContentOwner: onBehalfOfContentOwner)
                self.init(body: body, options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let dollarXgafv = options.dollarXgafv?.encode() {
                  params["$.xgafv"] = dollarXgafv
                }
                if let accessToken = options.accessToken {
                  params["access_token"] = accessToken
                }
                if let alt = options.alt?.encode() {
                  params["alt"] = alt
                }
                if let callback = options.callback {
                  params["callback"] = callback
                }
                if let fields = options.fields {
                  params["fields"] = fields
                }
                if let key = options.key {
                  params["key"] = key
                }
                if let oauthToken = options.oauthToken {
                  params["oauth_token"] = oauthToken
                }
                if let prettyPrint = options.prettyPrint {
                  params["prettyPrint"] = prettyPrint
                }
                if let quotaUser = options.quotaUser {
                  params["quotaUser"] = quotaUser
                }
                if let uploadProtocol = options.uploadProtocol {
                  params["upload_protocol"] = uploadProtocol
                }
                if let uploadType = options.uploadType {
                  params["uploadType"] = uploadType
                }
                params["part"] = options.part.joined(separator: ",")
                if let onBehalfOfContentOwner = options.onBehalfOfContentOwner {
                  params["onBehalfOfContentOwner"] = onBehalfOfContentOwner
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = PlaylistItem

            /** Successful response */
            case status200(PlaylistItem)

            public var success: PlaylistItem? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(PlaylistItem.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
