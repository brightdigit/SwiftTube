//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import Prch

/** An *activity* resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded. */
public struct Activity: Model {

    /** The contentDetails object contains information about the content associated with the activity. For example, if the snippet.type value is videoRated, then the contentDetails object's content identifies the rated video. */
    public var contentDetails: ActivityContentDetails?

    /** Etag of this resource */
    public var etag: String?

    /** The ID that YouTube uses to uniquely identify the activity. */
    public var id: String?

    /** Identifies what kind of resource this is. Value: the fixed string "youtube#activity". */
    public var kind: String?

    /** The snippet object contains basic details about the activity, including the activity's type and group ID. */
    public var snippet: ActivitySnippet?

    public init(contentDetails: ActivityContentDetails? = nil, etag: String? = nil, id: String? = nil, kind: String? = nil, snippet: ActivitySnippet? = nil) {
        self.contentDetails = contentDetails
        self.etag = etag
        self.id = id
        self.kind = kind
        self.snippet = snippet
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        contentDetails = try container.decodeIfPresent("contentDetails")
        etag = try container.decodeIfPresent("etag")
        id = try container.decodeIfPresent("id")
        kind = try container.decodeIfPresent("kind")
        snippet = try container.decodeIfPresent("snippet")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(contentDetails, forKey: "contentDetails")
        try container.encodeIfPresent(etag, forKey: "etag")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(kind, forKey: "kind")
        try container.encodeIfPresent(snippet, forKey: "snippet")
    }

}
